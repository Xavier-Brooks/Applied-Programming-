############################################################
# This make file demonstrated all special variables
# student copy
############################################################

# Standard compile flags
PROG = bin1
PROG2 = bin2
CC       = gcc
CFLAGS   = -O1 -g -Wall -std=c99 -pedantic
VALGRIND = valgrind --tool=memcheck --leak-check=yes --track-origins=yes
SOURCE = a.c b.c c.c
OBJS = $(patsubst( %.c %.o, $(SOURCE)))

# This demonstrates the returned target name
# $@ to represent the full target name of the current target
target1 target2:
	@echo "Target name is '$@'"

#$? returns the dependencies that are newer than the current target
$(PROG):$(SOURCE)
	@echo "Dependency change for bin1 is '$?'"
	$(CC) a.c b.c c.c -o bin1

#$^ is the list of depencies for the bin2 target
#$< is the first dependency for the bin2 target
$(PROG2):$(OBJS)
	@echo "Linking '$^' to '$@'" #$^ refers to the .o files in the line above and $@ is the bin2 name
	@echo "The first dependency of '$^' is '$<'"
	$(CC) $(CFLAGS) $(SOURCE) -o $(PROG2)

# This checks the associated .c files for the passed .o files
# assumes CC and CFLAGS variable for the passed list of objects

# This checks the associated .c files and o files, similar to
# the .c.o: rule but gives more control
#.c.o:
#	@echo "Compiling '$*'"

%.o: %.c
	@echo "Dependency change is '$*'"
	gcc $*.c -c

# This rule really does a multi-comparison of all of the object
# against all the the source file.  It doesn't compile the minimum
# set
.PHONY:mem
mem:$(PROG2)
	echo "running valgrind to test memory"
	$(VALGRIND) ./$(PROG2) > mem.txt

.PHONY:clean
clean:
	-rm -f *.o bin1 bin2



