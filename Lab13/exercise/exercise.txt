running a(lab_a) binary 
Main: Starting thread...
Main: All threads started...
Main will sleep 1 second. 
     Thread 1, will sleep 1 second. 
Main will sleep 1 second. 
     Thread 1, will sleep 1 second. 
Exiting main thread
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 

==317== Memcheck, a memory error detector
==317== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==317== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==317== Command: ././a
==317== 
==317== Thread 2:
==317== Conditional jump or move depends on uninitialised value(s)
==317==    at 0x48F7AD8: __vfprintf_internal (vfprintf-internal.c:1687)
==317==    by 0x48E1EBE: printf (printf.c:33)
==317==    by 0x1092EE: mySimpleThread (lab_a.c:62)
==317==    by 0x4863608: start_thread (pthread_create.c:477)
==317==    by 0x499F292: clone (clone.S:95)
==317==  Uninitialised value was created by a stack allocation
==317==    at 0x48A40EC: (below main) (libc-start.c:326)
==317== 
==317== Use of uninitialised value of size 8
==317==    at 0x48DB81B: _itoa_word (_itoa.c:179)
==317==    by 0x48F76F4: __vfprintf_internal (vfprintf-internal.c:1687)
==317==    by 0x48E1EBE: printf (printf.c:33)
==317==    by 0x1092EE: mySimpleThread (lab_a.c:62)
==317==    by 0x4863608: start_thread (pthread_create.c:477)
==317==    by 0x499F292: clone (clone.S:95)
==317==  Uninitialised value was created by a stack allocation
==317==    at 0x48A40EC: (below main) (libc-start.c:326)
==317== 
==317== Conditional jump or move depends on uninitialised value(s)
==317==    at 0x48DB82D: _itoa_word (_itoa.c:179)
==317==    by 0x48F76F4: __vfprintf_internal (vfprintf-internal.c:1687)
==317==    by 0x48E1EBE: printf (printf.c:33)
==317==    by 0x1092EE: mySimpleThread (lab_a.c:62)
==317==    by 0x4863608: start_thread (pthread_create.c:477)
==317==    by 0x499F292: clone (clone.S:95)
==317==  Uninitialised value was created by a stack allocation
==317==    at 0x48A40EC: (below main) (libc-start.c:326)
==317== 
==317== Conditional jump or move depends on uninitialised value(s)
==317==    at 0x48F83A8: __vfprintf_internal (vfprintf-internal.c:1687)
==317==    by 0x48E1EBE: printf (printf.c:33)
==317==    by 0x1092EE: mySimpleThread (lab_a.c:62)
==317==    by 0x4863608: start_thread (pthread_create.c:477)
==317==    by 0x499F292: clone (clone.S:95)
==317==  Uninitialised value was created by a stack allocation
==317==    at 0x48A40EC: (below main) (libc-start.c:326)
==317== 
==317== Conditional jump or move depends on uninitialised value(s)
==317==    at 0x48F786E: __vfprintf_internal (vfprintf-internal.c:1687)
==317==    by 0x48E1EBE: printf (printf.c:33)
==317==    by 0x1092EE: mySimpleThread (lab_a.c:62)
==317==    by 0x4863608: start_thread (pthread_create.c:477)
==317==    by 0x499F292: clone (clone.S:95)
==317==  Uninitialised value was created by a stack allocation
==317==    at 0x48A40EC: (below main) (libc-start.c:326)
==317== 
Main: Starting thread...
Main: All threads started...
Main will sleep 1 second. 
     Thread 1, will sleep 1 second. 
Main will sleep 1 second. 
     Thread 1, will sleep 1 second. 
Exiting main thread
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
==317== 
==317== HEAP SUMMARY:
==317==     in use at exit: 272 bytes in 1 blocks
==317==   total heap usage: 7 allocs, 6 frees, 6,078 bytes allocated
==317== 
==317== Thread 1:
==317== 272 bytes in 1 blocks are possibly lost in loss record 1 of 1
==317==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==317==    by 0x40149CA: allocate_dtv (dl-tls.c:286)
==317==    by 0x40149CA: _dl_allocate_tls (dl-tls.c:532)
==317==    by 0x4864322: allocate_stack (allocatestack.c:622)
==317==    by 0x4864322: pthread_create@@GLIBC_2.2.5 (pthread_create.c:660)
==317==    by 0x10923C: main (lab_a.c:32)
==317== 
==317== LEAK SUMMARY:
==317==    definitely lost: 0 bytes in 0 blocks
==317==    indirectly lost: 0 bytes in 0 blocks
==317==      possibly lost: 272 bytes in 1 blocks
==317==    still reachable: 0 bytes in 0 blocks
==317==         suppressed: 0 bytes in 0 blocks
==317== 
==317== For lists of detected and suppressed errors, rerun with: -s
==317== ERROR SUMMARY: 21 errors from 6 contexts (suppressed: 0 from 0)

The above errors are the result of running the a binary 
through valgrind. since the thread did not finish termination before 
the pthread exit function was called memory leaks occurred.

step 9)

Main: Starting thread...
Main: All threads started...
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
the value of rcp is: 0
Main will sleep 1 second. 
Main will sleep 1 second. 
Exiting main thread

Due to the join function that waits until the thread is complete 
main() can exit after the threads finish and not throw memory leaks.
below is the valgrind outpur to show it.

==395== Memcheck, a memory error detector
==395== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==395== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==395== Command: ././b
==395== 
Main: Starting thread...
Main: All threads started...
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
the value of rcp is: 0
Main will sleep 1 second. 
Main will sleep 1 second. 
Exiting main thread
==395== 
==395== HEAP SUMMARY:
==395==     in use at exit: 0 bytes in 0 blocks
==395==   total heap usage: 7 allocs, 7 frees, 6,078 bytes allocated
==395== 
==395== All heap blocks were freed -- no leaks are possible
==395== 
==395== For lists of detected and suppressed errors, rerun with: -s
==395== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

step 14).


Main: Starting thread...
Thread 0 started
     Thread 0, will sleep 1 second. 
Thread 1 started
Thread 2 started
Main: All threads started...
     Thread 1, will sleep 1 second. 
     Thread 2, will sleep 1 second. 
     Thread 0, will sleep 1 second. 
     Thread 2, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 0, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 2, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 2, will sleep 1 second. 
     Thread 0, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 0, will sleep 1 second. 
     Thread 2, will sleep 1 second. 
     Thread 2, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 0, will sleep 1 second. 
Thread RC 0, RCP is 0
Thread RC 0, RCP is 1
Thread RC 0, RCP is 2
Main will sleep 1 second. 
Main will sleep 1 second. 
Exiting main thread

the program is different from the last in that it
never starts the threads or call delay functions 
in the same order in addition the return codes are 
unique for the create function though not completely
unique since the return codesd for the threads can 
be one of three values.

==569== Memcheck, a memory error detector
==569== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==569== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==569== Command: ././a
==569== 
==569== Thread 2:
==569== Conditional jump or move depends on uninitialised value(s)
==569==    at 0x48F7AD8: __vfprintf_internal (vfprintf-internal.c:1687)
==569==    by 0x48E1EBE: printf (printf.c:33)
==569==    by 0x1092EE: mySimpleThread (lab_a.c:60)
==569==    by 0x4863608: start_thread (pthread_create.c:477)
==569==    by 0x499F292: clone (clone.S:95)
==569==  Uninitialised value was created by a stack allocation
==569==    at 0x48A40EC: (below main) (libc-start.c:326)
==569== 
==569== Use of uninitialised value of size 8
==569==    at 0x48DB81B: _itoa_word (_itoa.c:179)
==569==    by 0x48F76F4: __vfprintf_internal (vfprintf-internal.c:1687)
==569==    by 0x48E1EBE: printf (printf.c:33)
==569==    by 0x1092EE: mySimpleThread (lab_a.c:60)
==569==    by 0x4863608: start_thread (pthread_create.c:477)
==569==    by 0x499F292: clone (clone.S:95)
==569==  Uninitialised value was created by a stack allocation
==569==    at 0x48A40EC: (below main) (libc-start.c:326)
==569== 
==569== Conditional jump or move depends on uninitialised value(s)
==569==    at 0x48DB82D: _itoa_word (_itoa.c:179)
==569==    by 0x48F76F4: __vfprintf_internal (vfprintf-internal.c:1687)
==569==    by 0x48E1EBE: printf (printf.c:33)
==569==    by 0x1092EE: mySimpleThread (lab_a.c:60)
==569==    by 0x4863608: start_thread (pthread_create.c:477)
==569==    by 0x499F292: clone (clone.S:95)
==569==  Uninitialised value was created by a stack allocation
==569==    at 0x48A40EC: (below main) (libc-start.c:326)
==569== 
==569== Conditional jump or move depends on uninitialised value(s)
==569==    at 0x48F83A8: __vfprintf_internal (vfprintf-internal.c:1687)
==569==    by 0x48E1EBE: printf (printf.c:33)
==569==    by 0x1092EE: mySimpleThread (lab_a.c:60)
==569==    by 0x4863608: start_thread (pthread_create.c:477)
==569==    by 0x499F292: clone (clone.S:95)
==569==  Uninitialised value was created by a stack allocation
==569==    at 0x48A40EC: (below main) (libc-start.c:326)
==569== 
==569== Conditional jump or move depends on uninitialised value(s)
==569==    at 0x48F786E: __vfprintf_internal (vfprintf-internal.c:1687)
==569==    by 0x48E1EBE: printf (printf.c:33)
==569==    by 0x1092EE: mySimpleThread (lab_a.c:60)
==569==    by 0x4863608: start_thread (pthread_create.c:477)
==569==    by 0x499F292: clone (clone.S:95)
==569==  Uninitialised value was created by a stack allocation
==569==    at 0x48A40EC: (below main) (libc-start.c:326)
==569== 
Main: Starting thread...
Main: All threads started...
Main will sleep 1 second. 
     Thread 1, will sleep 1 second. 
Main will sleep 1 second. 
     Thread 1, will sleep 1 second. 
Exiting main thread
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
     Thread 1, will sleep 1 second. 
==569== 
==569== HEAP SUMMARY:
==569==     in use at exit: 272 bytes in 1 blocks
==569==   total heap usage: 7 allocs, 6 frees, 6,078 bytes allocated
==569== 
==569== Thread 1:
==569== 272 bytes in 1 blocks are possibly lost in loss record 1 of 1
==569==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==569==    by 0x40149CA: allocate_dtv (dl-tls.c:286)
==569==    by 0x40149CA: _dl_allocate_tls (dl-tls.c:532)
==569==    by 0x4864322: allocate_stack (allocatestack.c:622)
==569==    by 0x4864322: pthread_create@@GLIBC_2.2.5 (pthread_create.c:660)
==569==    by 0x10923C: main (lab_a.c:32)
==569== 
==569== LEAK SUMMARY:
==569==    definitely lost: 0 bytes in 0 blocks
==569==    indirectly lost: 0 bytes in 0 blocks
==569==      possibly lost: 272 bytes in 1 blocks
==569==    still reachable: 0 bytes in 0 blocks
==569==         suppressed: 0 bytes in 0 blocks
==569== 
==569== For lists of detected and suppressed errors, rerun with: -s
==569== ERROR SUMMARY: 16 errors from 6 contexts (suppressed: 0 from 0)

step 15} above is the valgring report for the c binary, the errors are due 
to the fact that either main exits before the threads do or that I didn't call 
pthread_exit() on the taskRC for each thread that was created.

step 17) the compiler doesn't know about the program having multiple threads
         as a result must be made volitile so each thread can r/w to it.
