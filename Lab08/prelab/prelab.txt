2. For starters the row allocation is exactly the same in both files, a double pointer 
is made that points primarily to double pointers. each of these double pointers represent 
a different row in the 2-d array. A second pointer is made that holds x number of doubles 
in memory, x being the number of elements in the 2-d array. whenever each row holds a certain 
number of elements thus a for loop is used to iterate through each index of the rows pointer and 
assign the the address of the first element in each row as in line 33 of lab_a.

The difference is that lab_c mallocs the number elements in each row and assigns the returned 
malloc pointer for these elements to each of the row in the row pointer.

due to this the lab_c source needs to iterate through each row to clear the column 
pointers then clear the row pointer, wheres lab_a.c only needs to clear the element
pointer and the row pointer.

==142== Memcheck, a memory error detector
==142== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==142== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==142== Command: ./lab_a
==142== 
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
==142== 
==142== HEAP SUMMARY:
==142==     in use at exit: 0 bytes in 0 blocks
==142==   total heap usage: 3 allocs, 3 frees, 4,240 bytes allocated
==142== 
==142== All heap blocks were freed -- no leaks are possible
==142== 
==142== For lists of detected and suppressed errors, rerun with: -s
==142== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


==146== Memcheck, a memory error detector
==146== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==146== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==146== Command: ./lab_c
==146== 
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
==146== 
==146== HEAP SUMMARY:
==146==     in use at exit: 0 bytes in 0 blocks
==146==   total heap usage: 5 allocs, 5 frees, 4,240 bytes allocated
==146== 
==146== All heap blocks were freed -- no leaks are possible
==146== 
==146== For lists of detected and suppressed errors, rerun with: -s
==146== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

